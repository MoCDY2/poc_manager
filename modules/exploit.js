const net = require('net');
const dgram = require('dgram');
const raw = require('raw-socket');

function tcpConnect(host, port, payload){
    let client = net.createConnection({ port: 80 }, () => {
        makeLog("DEBUG", "与" + host + ":" + port + "建立连接")
        client.write(payload);
    });
    client.on('data', (data) => {
        makeLog("DEBUG", `收到消息: ${data}`);
        client.end();
    });
    client.on('end', () => {
        makeLog("DEBUG", "与" + host + ":" + port + "断开连接")
    });
}

function udpMessage(host, port, payload){
    let client = dgram.createSocket('udp4');
    let message = Buffer.from(payload);

    client.send(message, port, host, (error) => {
        if (error) {
            makeLog("ERROR", `UDP报文发送失败: ${error}`);
        } else {
            makeLog("DEBUG", `向${host}:${port}发送UDP报文成功`);
        }
    });
}

function IPMessage(host, payload){
    let message = Buffer.from(payload)
    raw.send(payload, 0, message.length, host, (err) => {
        if (err) {
            makeLog("ERROR", `IP报文发送失败: ${error}`);
        } else {
            makeLog("DEBUG", `向${host}发送IP报文成功`);
        }
    });
}

function httpConnect(url, method, data) {
    let config = {
        method: method,
        url: url,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
    };

    if (method.toLowerCase() === 'get' || method.toLowerCase() === 'delete') {
        config.params = data;
    } else {
        config.data = qs.stringify(data);
    }

    return axios(config)
        .then((response) => {
            makeLog("DEBUG", `向${url}发送HTTP报文成功`);
            return response.data;
        })
        .catch((error) => {
            makeLog("ERROR", `向${url}发送HTTP报文失败`);
            throw error;
        });
}